{"version":3,"sources":["redux/todoReducers.js","redux/actionTypes.js","redux/bucketReducers.js","redux/store.js","redux/actions.js","components/addBucket.js","components/addToDo.js","components/todoMain.js","App.js","serviceWorker.js","index.js"],"names":["initialTodoState","todos","state","action","type","id","payload","bucketId","todoName","completed","map","todo","numIndex","parseInt","filter","initialTodoBucketState","todoBuckets","bucketName","incompeleteCount","completedCount","createdTime","createStore","combineReducers","window","__REDUX_DEVTOOLS_EXTENSION__","ToDoId","BucketId","createFilterOptions","connect","addTodoBucket","useState","selectedValue","setSelectedValue","uniqueBuckets","setUniqueBuckets","getCurrentDateTime","currentdate","Date","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","getUniqueBucketValues","name","item","length","old","useEffect","Autocomplete","value","onChange","event","newValue","inputValue","filterOptions","options","params","filtered","push","selectOnFocus","clearOnBlur","getOptionSelected","option","getOptionLabel","style","width","freeSolo","fullWidth","renderInput","TextField","label","variant","placeholder","renderOption","matches","match","parts","parse","part","index","key","fontWeight","highlight","text","useStyles","makeStyles","theme","appBar","position","title","backgroundColor","color","root","palette","background","paper","section1","margin","spacing","section2","closeButton","right","top","grey","input","marginLeft","flex","iconButton","padding","divider","height","root1","display","alignItems","addTodo","toggleTodo","deleteTodo","editTodo","addTodoBucketCount","props","classes","checked","addToDoValue","setToDoValue","inCompleteCount","setInCompleteCount","completeCount","setCompleteCount","renderValues","useCallback","bucketData","Dialog","maxWidth","open","openDialog","scroll","DialogTitle","className","IconButton","aria-label","onClick","closeDialog","DialogContent","dividers","e","target","InputProps","endAdornment","InputAdornment","disabled","Divider","marginTop","Typography","gutterBottom","List","labelId","ListItem","role","undefined","Paper","component","Checkbox","edge","indexOf","tabIndex","disableRipple","inputProps","InputBase","toString","orientation","textDecoration","heroContent","heroButtons","cardGrid","paddingTop","paddingBottom","card","flexDirection","cardMedia","cardContent","flexGrow","deleteTodoBucket","deleteAllTodos","openModal","setOpenModal","getBucketData","setBucketData","CssBaseline","Container","align","Grid","container","justify","_","xs","sm","md","Card","CardActionArea","CardContent","App","store","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.22cae734.chunk.js","sourcesContent":["import { ADD_TODO, TOGGLE_TODO, DELETE_TODO, EDIT_TODO, DELETE_ALL_TODOS } from './actionTypes';\r\n\r\nconst initialTodoState = [];\r\n\r\nexport const todos = (state = initialTodoState, action) => {\r\n    switch (action.type) {\r\n        //Add ToDo Reducer\r\n        case ADD_TODO: {\r\n            return [\r\n                ...state, {\r\n                    id: action.payload.id,\r\n                    bucketId: action.payload.bucketId,\r\n                    todoName: action.payload.todoName,\r\n                    completed: false,\r\n                }\r\n            ]\r\n        }\r\n\r\n        //Toggle ToDo Reducer\r\n        case TOGGLE_TODO: {\r\n            return state.map(todo =>\r\n                (todo.id === action.payload.id)\r\n                    ? { ...todo, completed: !todo.completed }\r\n                    : todo\r\n            )\r\n        }\r\n\r\n        //Edit ToDo Reducer\r\n        case EDIT_TODO: {\r\n            return state.map(todo =>\r\n                (todo.id === action.payload.id)\r\n                    ? { ...todo, todoName: action.payload.todoName }\r\n                    : todo\r\n            )\r\n        }\r\n\r\n        //Delete ToDo Reducer\r\n        case DELETE_TODO: {\r\n            const numIndex = parseInt(action.payload.id);\r\n            return state.filter(todo => todo.id !== numIndex);\r\n        }\r\n\r\n        //Delete All ToDo Reducer\r\n        case DELETE_ALL_TODOS: {\r\n            const numIndex = parseInt(action.payload.bucketId);\r\n            return state.filter(todo => todo.bucketId !== numIndex);\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n","//Bucket Action Types\r\nexport const ADD_TODO_BUCKET = 'ADD_TODO_BUCKET'\r\nexport const ADD_TODO_BUCKET_COUNT = 'ADD_TODO_BUCKET_COUNT'\r\nexport const EDIT_TODO_BUCKET = 'EDIT_TODO_BUCKET'\r\nexport const DELETE_TODO_BUCKET = 'DELETE_TODO_BUCKET'\r\n\r\n//Todo Action Types\r\nexport const ADD_TODO = 'ADD_TODO'\r\nexport const TOGGLE_TODO = 'TOGGLE_TODO'\r\nexport const DELETE_TODO = 'DELETE_TODO'\r\nexport const EDIT_TODO = 'EDIT_TODO'\r\nexport const DELETE_ALL_TODOS = 'DELETE_ALL_TODOS'\r\n\r\n","import { ADD_TODO_BUCKET, DELETE_TODO_BUCKET, ADD_TODO_BUCKET_COUNT } from './actionTypes';\r\n\r\nconst initialTodoBucketState = []\r\n\r\nexport const todoBuckets = (state = initialTodoBucketState, action) => {\r\n    switch (action.type) {\r\n\r\n        //Add Bucket ToDo Reducer\r\n        case ADD_TODO_BUCKET: {\r\n            return [\r\n                ...state, {\r\n                    bucketId: action.payload.bucketId,\r\n                    bucketName: action.payload.bucketName,\r\n                    incompeleteCount: 0,\r\n                    completedCount: 0,\r\n                    createdTime: action.payload.createdTime,\r\n                }\r\n            ]\r\n        }\r\n\r\n        //Delete Bucket ToDo Reducer\r\n        case DELETE_TODO_BUCKET: {\r\n            const numIndex = parseInt(action.payload.bucketId);\r\n            return state.filter(todo => todo.bucketId !== numIndex);\r\n        }\r\n\r\n        //Add Bucket ToDo Count Reducer\r\n        case ADD_TODO_BUCKET_COUNT: {\r\n            return state.map(todo =>\r\n                (todo.bucketId === action.payload.bucketId)\r\n                    ? { ...todo, incompeleteCount: action.payload.incompeleteCount, completedCount: action.payload.completedCount }\r\n                    : todo\r\n            )\r\n        }\r\n\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}","import { createStore, combineReducers } from 'redux';\r\nimport { todos } from './todoReducers';\r\nimport { todoBuckets } from './bucketReducers';\r\n\r\nexport default createStore(combineReducers({ todoBuckets, todos }),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())","import { ADD_TODO_BUCKET, DELETE_TODO_BUCKET, ADD_TODO_BUCKET_COUNT } from './actionTypes';\r\nimport { ADD_TODO, TOGGLE_TODO, DELETE_TODO, EDIT_TODO, DELETE_ALL_TODOS } from './actionTypes';\r\n\r\n\r\nlet ToDoId = 1;\r\nlet BucketId = 1;\r\n\r\n//Todo Bucket Actions\r\nexport const addTodoBucket = (bucketName, incompeleteCount, completedCount, createdTime) => (\r\n    {\r\n        type: ADD_TODO_BUCKET,\r\n        payload: {\r\n            bucketId: BucketId++,\r\n            bucketName,\r\n            incompeleteCount,\r\n            completedCount,\r\n            createdTime\r\n        }\r\n    }\r\n)\r\n\r\nexport const deleteTodoBucket = (bucketId) => (\r\n    {\r\n        type: DELETE_TODO_BUCKET,\r\n        payload: {\r\n            bucketId\r\n        }\r\n    }\r\n)\r\n\r\nexport const addTodoBucketCount = (bucketId, completedCount, incompeleteCount) => (\r\n    {\r\n        type: ADD_TODO_BUCKET_COUNT,\r\n        payload: {\r\n            bucketId,\r\n            completedCount,\r\n            incompeleteCount\r\n        }\r\n    }\r\n)\r\n\r\n//ToDo Actions\r\nexport const addTodo = (bucketId, todoName) => (\r\n    {\r\n        type: ADD_TODO,\r\n        payload: {\r\n            id: ToDoId++,\r\n            bucketId,\r\n            todoName\r\n        }\r\n    }\r\n)\r\n\r\nexport const toggleTodo = (id) => (\r\n    {\r\n        type: TOGGLE_TODO,\r\n        payload: {\r\n            id\r\n        }\r\n    }\r\n)\r\n\r\nexport const editTodo = (id, todoName) => (\r\n    {\r\n        type: EDIT_TODO,\r\n        payload: {\r\n            id,\r\n            todoName\r\n        }\r\n    }\r\n)\r\n\r\nexport const deleteTodo = (id, ) => (\r\n    {\r\n        type: DELETE_TODO,\r\n        payload: {\r\n            id\r\n        }\r\n    }\r\n)\r\n\r\nexport const deleteAllTodos = (bucketId) => (\r\n    {\r\n        type: DELETE_ALL_TODOS,\r\n        payload: {\r\n            bucketId\r\n        }\r\n    }\r\n)","import React, { useState, useEffect } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport match from 'autosuggest-highlight/match';\r\nimport { connect } from 'react-redux';\r\nimport { addTodoBucket } from '../redux/actions';\r\nimport { todoBuckets } from '../redux/bucketReducers';\r\n\r\nconst filter = createFilterOptions();\r\n\r\nfunction AddToDoBucket({ todoBuckets, addTodoBucket }) {\r\n\r\n    const [selectedValue, setSelectedValue] = useState(null);\r\n    const [uniqueBuckets, setUniqueBuckets] = useState([]);\r\n\r\n    const getCurrentDateTime = () => {\r\n        const currentdate = new Date();\r\n        const datetime = currentdate.getDate() + \"/\"\r\n            + (currentdate.getMonth() + 1) + \"/\"\r\n            + currentdate.getFullYear() + \" @ \"\r\n            + currentdate.getHours() + \":\"\r\n            + currentdate.getMinutes() + \":\"\r\n            + currentdate.getSeconds();\r\n        return datetime;\r\n    }\r\n\r\n    const handleAutoCompleteChange = (event, newValue) => {\r\n        if (typeof newValue === 'string') {\r\n            setSelectedValue({\r\n                bucketName: newValue,\r\n            });\r\n            addTodoBucket(newValue, 0, 0, getCurrentDateTime());\r\n            getUniqueBucketValues(newValue);\r\n        } else if (newValue && newValue.inputValue) {\r\n            setSelectedValue({\r\n                bucketName: newValue.inputValue,\r\n            });\r\n            addTodoBucket(newValue.inputValue, 0, 0, getCurrentDateTime());\r\n            getUniqueBucketValues(newValue.inputValue);\r\n        } else if (newValue !== null) {\r\n            setSelectedValue(newValue);\r\n            addTodoBucket(newValue.bucketName, 0, 0, getCurrentDateTime());\r\n            getUniqueBucketValues(newValue.bucketName);\r\n        }\r\n        setSelectedValue(null);\r\n    }\r\n\r\n    const handleFilterOptions = (options, params) => {\r\n        const filtered = filter(options, params);\r\n        if (params.inputValue !== '') {\r\n            filtered.push({\r\n                inputValue: params.inputValue,\r\n                bucketName: `Add bucket \"${params.inputValue}\"`,\r\n            });\r\n\r\n        }\r\n        return filtered;\r\n    }\r\n\r\n    const handleGetOptionLabel = (option) => {\r\n        if (typeof option === 'string') {\r\n            return option;\r\n        }\r\n        if (option.inputValue) {\r\n            return option.inputValue;\r\n        }\r\n        return option.bucketName;\r\n    }\r\n\r\n    const handleRenderOptions = (option, { inputValue }) => {\r\n        const matches = match(option.bucketName, inputValue);\r\n        const parts = parse(option.bucketName, matches);\r\n        return (\r\n            <div>\r\n                {parts.map((part, index) => (\r\n                    <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\r\n                        {part.text}\r\n                    </span>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const getUniqueBucketValues = name => {\r\n        const ifExist = todoBuckets.filter(item => item.bucketName === name);\r\n        if (ifExist.length === 0) {\r\n            setUniqueBuckets(old => ([...old, { bucketName: name }]));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (todoBuckets.length === 0) {\r\n            setUniqueBuckets([]);\r\n        }\r\n    }, [todoBuckets])\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Autocomplete\r\n                    value={selectedValue}\r\n                    onChange={handleAutoCompleteChange}\r\n                    filterOptions={handleFilterOptions}\r\n                    selectOnFocus\r\n                    clearOnBlur\r\n                    id=\"add-bucket-todo\"\r\n                    options={uniqueBuckets}\r\n                    getOptionSelected={(option, value) => option === value}\r\n                    getOptionLabel={handleGetOptionLabel}\r\n                    style={{ width: 500 }}\r\n                    freeSolo\r\n                    fullWidth\r\n                    renderInput={(params) => (\r\n                        <TextField {...params} label=\"Add a new bucket\" variant=\"outlined\" placeholder=\"Search or Add a Bucket..\" />\r\n                    )}\r\n                    renderOption={handleRenderOptions}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default connect(todoBuckets, { addTodoBucket })(AddToDoBucket)\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { connect } from 'react-redux';\r\nimport { addTodo, toggleTodo, deleteTodo, editTodo, addTodoBucketCount } from '../redux/actions';\r\nimport { todos } from '../redux/todoReducers';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n        position: 'relative',\r\n    },\r\n    title: {\r\n        backgroundColor: '#3f51b5',\r\n        color: '#fff'\r\n    },\r\n    root: {\r\n        width: '100%',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    section1: {\r\n        margin: theme.spacing(2),\r\n    },\r\n    section2: {\r\n        margin: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n    input: {\r\n        marginLeft: theme.spacing(1),\r\n        flex: 1,\r\n    },\r\n    iconButton: {\r\n        padding: 10,\r\n    },\r\n    divider: {\r\n        height: 28,\r\n        margin: 4,\r\n    },\r\n    root1: {\r\n        padding: '2px 4px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        width: '100%',\r\n    },\r\n}));\r\n\r\nfunction AddToDo({ todos, addTodo, toggleTodo, deleteTodo, editTodo, addTodoBucketCount, ...props }) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [checked] = useState([]);\r\n    const [addToDoValue, setToDoValue] = useState('');\r\n    const [inCompleteCount, setInCompleteCount] = useState(0);\r\n    const [completeCount, setCompleteCount] = useState(0);\r\n\r\n    const handleAddToDoValue = () => {\r\n        addTodo(props.bucketData.bucketId, addToDoValue);\r\n        setToDoValue('');\r\n    }\r\n\r\n    const renderValues = useCallback(() => {\r\n        setInCompleteCount(todos.filter((item, index) => !item.completed && item.bucketId === props.bucketData.bucketId).length);\r\n        setCompleteCount(todos.filter((item, index) => item.completed && item.bucketId === props.bucketData.bucketId).length);\r\n    }, [todos, props.bucketData.bucketId])\r\n\r\n    useEffect(() => {\r\n        renderValues();\r\n        if (completeCount > 0 || inCompleteCount > 0) {\r\n            addTodoBucketCount(props.bucketData.bucketId, completeCount, inCompleteCount);\r\n        }\r\n    }, [inCompleteCount, completeCount, renderValues, addTodoBucketCount, props.bucketData.bucketId])\r\n\r\n    return (\r\n        <>\r\n            <Dialog fullWidth maxWidth=\"sm\" open={props.openDialog} scroll=\"paper\">\r\n                <DialogTitle id=\"scroll-dialog-title\" className={classes.title}>{props.bucketData.bucketName}\r\n                    <IconButton aria-label=\"close\" className={classes.closeButton} onClick={props.closeDialog} >\r\n                        <CloseIcon />\r\n                    </IconButton>\r\n                </DialogTitle>\r\n                <DialogContent dividers>\r\n                    <div className={classes.root}>\r\n                        <div>\r\n                            <TextField\r\n                                label=\"Add a ToDo\"\r\n                                value={addToDoValue}\r\n                                onChange={(e) => setToDoValue(e.target.value)}\r\n                                variant=\"outlined\"\r\n                                style={{ width: '100%' }}\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton aria-label=\"addToDo\" color=\"primary\" disabled={addToDoValue === ''} onClick={handleAddToDoValue} >\r\n                                                <NoteAddIcon />\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                            <Divider style={{ marginTop: '1em' }} variant=\"middle\" />\r\n                        </div>\r\n                        <div className={classes.section1}>\r\n                            {inCompleteCount > 0 &&\r\n                                <div>\r\n                                    <Typography gutterBottom variant=\"h6\">\r\n                                        {inCompleteCount} - incomplete {inCompleteCount > 1 ? 'items' : 'item'}\r\n                                    </Typography>\r\n                                    <List className={classes.root}>\r\n                                        {todos.length > 0 && todos.filter((item, index) => !item.completed && item.bucketId === props.bucketData.bucketId).map((item, index) => {\r\n                                            const labelId = `checkbox-list-label-${index}`;\r\n                                            return (\r\n                                                <ListItem key={index} role={undefined}>\r\n                                                    <Paper component=\"form\" className={classes.root1}>\r\n                                                        <Checkbox\r\n                                                            edge=\"start\"\r\n                                                            checked={checked.indexOf(index) !== -1}\r\n                                                            tabIndex={-1}\r\n                                                            disableRipple\r\n                                                            inputProps={{ 'aria-labelledby': labelId }}\r\n                                                            onClick={() => toggleTodo(item.id)}\r\n                                                        />\r\n                                                        <InputBase\r\n                                                            className={classes.input}\r\n                                                            inputProps={{ 'aria-labelledby': labelId }}\r\n                                                            onChange={(e) => editTodo(item.id, e.target.value)}\r\n                                                            key={index} value={item.todoName} id={index.toString()}\r\n                                                        />\r\n                                                        <Divider className={classes.divider} orientation=\"vertical\" />\r\n                                                        <IconButton edge=\"end\" aria-label=\"deleteToDo\" onClick={() => deleteTodo(item.id)} >\r\n                                                            <DeleteForeverIcon />\r\n                                                        </IconButton>\r\n                                                    </Paper>\r\n                                                </ListItem>\r\n                                            );\r\n                                        })}\r\n                                    </List>\r\n                                </div>}\r\n                        </div>\r\n                        {completeCount > 0 && <div className={classes.section2}>\r\n                            <Typography gutterBottom variant=\"h6\">\r\n                                {completeCount} - completed {completeCount > 1 ? 'items' : 'item'}\r\n                            </Typography>\r\n                            <List className={classes.root}>\r\n                                {todos.length > 0 && todos.filter((item, index) => item.completed && item.bucketId === props.bucketData.bucketId).map((item, index) => {\r\n                                    const labelId = `checkbox-list-label-${index}`;\r\n                                    return (\r\n                                        <ListItem key={index} role={undefined}>\r\n                                            <Paper component=\"form\" className={classes.root1} style={{ textDecoration: \"line-through\", background: '#d3d3d382' }}>\r\n                                                <Checkbox\r\n                                                    edge=\"start\"\r\n                                                    checked={item.completed}\r\n                                                    tabIndex={-1}\r\n                                                    disableRipple\r\n                                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                                    onClick={() => toggleTodo(item.id)}\r\n                                                />\r\n                                                <InputBase\r\n                                                    className={classes.input}\r\n                                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                                    onChange={(e) => editTodo(item.id, e.target.value)}\r\n                                                    key={index} value={item.todoName} id={index.toString()}\r\n                                                />\r\n                                                <Divider className={classes.divider} orientation=\"vertical\" />\r\n                                                <IconButton edge=\"end\" aria-label=\"deleteToDo\" onClick={() => deleteTodo(item.id)} >\r\n                                                    <DeleteForeverIcon />\r\n                                                </IconButton>\r\n                                            </Paper>\r\n                                        </ListItem>\r\n                                    );\r\n                                })}\r\n                            </List>\r\n                        </div>}\r\n                    </div>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default connect(todos, { addTodo, toggleTodo, deleteTodo, editTodo, addTodoBucketCount })(AddToDo)","import React, { useState } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { connect } from 'react-redux';\r\nimport AddBucket from '../components/addBucket';\r\nimport AddToDo from '../components/addToDo';\r\nimport { deleteTodoBucket, deleteAllTodos } from '../redux/actions';\r\nimport { todoBuckets } from '../redux/bucketReducers';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    heroContent: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        padding: theme.spacing(8, 0, 6),\r\n    },\r\n    heroButtons: {\r\n        marginTop: theme.spacing(4),\r\n    },\r\n    cardGrid: {\r\n        paddingTop: theme.spacing(2),\r\n        paddingBottom: theme.spacing(2),\r\n    },\r\n    card: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    cardMedia: {\r\n        paddingTop: '60%',\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1,\r\n    }\r\n}));\r\n\r\nfunction ToDoMain({ todoBuckets, deleteTodoBucket, deleteAllTodos }) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [openModal, setOpenModal] = useState(false);\r\n    const [getBucketData, setBucketData] = useState([]);\r\n\r\n    const renderBucketData = (bucketData) => {\r\n        setBucketData(bucketData);\r\n        setOpenModal(true);\r\n    }\r\n\r\n    const handleClose = _ => setOpenModal(false);\r\n\r\n    return (\r\n        <>\r\n            <CssBaseline />\r\n            <main>\r\n                <div className={classes.heroContent}>\r\n                    <Container maxWidth=\"md\">\r\n                        <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\r\n                            ToDo App\r\n                        </Typography>\r\n\r\n                        <div className={classes.heroButtons}>\r\n                            <Grid container spacing={2} justify=\"center\">\r\n                                <Grid item >\r\n                                    <AddBucket />\r\n                                    {openModal === true && <AddToDo bucketData={getBucketData} openDialog={openModal} closeDialog={handleClose} />}\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </Container>\r\n                </div>\r\n                {todoBuckets.length > 0 && < Container className={classes.cardGrid} maxWidth=\"xl\">\r\n                    <Grid container spacing={3}>\r\n                        {todoBuckets.map((card) => (\r\n                            <Grid item key={card.bucketId} xs={12} sm={6} md={3}>\r\n                                <Card className={classes.card} >\r\n                                    <CardActionArea>\r\n                                        <CardContent className={classes.cardContent} onClick={() => renderBucketData(card)}>\r\n                                            <Typography gutterBottom variant=\"h5\" component=\"h2\" align=\"center\" >\r\n                                                {card.bucketName}\r\n                                            </Typography>\r\n                                            <Typography>\r\n                                                InCompete : {card.incompeleteCount}\r\n                                            </Typography>\r\n                                            <Typography>\r\n                                                Competed : {card.completedCount}\r\n                                            </Typography>\r\n                                            <Typography>\r\n                                                Created at : {card.createdTime}\r\n                                            </Typography>\r\n                                        </CardContent>\r\n                                    </CardActionArea>\r\n                                    <Divider variant=\"middle\" />\r\n                                    <Typography align=\"center\" >\r\n                                        <IconButton aria-label=\"deleteBucket\" onClick={() => { deleteTodoBucket(card.bucketId); deleteAllTodos(card.bucketId); }}>\r\n                                            <DeleteForeverIcon />\r\n                                        </IconButton>\r\n                                    </Typography>\r\n                                </Card>\r\n                            </Grid>\r\n                        ))}\r\n                    </Grid>\r\n                </Container>}\r\n            </main>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default connect(todoBuckets, { deleteTodoBucket, deleteAllTodos })(ToDoMain);","import React from 'react';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport store from '../src/redux/store';\nimport ToDoMain from '../src/components/todoMain';\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <div className=\"App\">\n                <ToDoMain />\n            </div>\n        </Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}